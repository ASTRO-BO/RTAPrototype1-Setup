#!/usr/bin/env bash

trap exitfunc ERR

prefix=$HOME/local.rtaproto1
sourcedir=$PWD
build_type=Release
platform=$(uname -s)
if [[ $platform == "Darwin" ]] ; then
	nthreads=$(sysctl hw.ncpu | awk '{print $2}')
else
	nthreads=$(cat /proc/cpuinfo | grep processor | wc -l)
fi
clean=$1

function exitfunc() {
	if [[ $plaform == "Darwin" ]] ; then
		tput seaf op
	fi

	exit
}

function echo_red() {
	if [[ $platform == "Darwin" ]] ; then
		tput setaf 1
		echo $@
		tput setaf op
	else
		echo -e "\e[00;31m$1\e[00m"
	fi
}

function set_debug_flags() {
	if [[ $build_type == "Debug" ]] ; then
		export CFLAGS="$CFLAGS -O0 -g" ; export CXXFLAGS="$CXXFLAGS -O0 -g"
	else
		export CFLAGS="$CFLAGS -O2" ; export CXXFLAGS="$CXXFLAGS -O2"
	fi
}

function reset_flags() {
	unset CFLAGS ; unset CXXFLAGS ; unset LDFLAGS
}

function show_help {
	echo "Usage: $0 [-hsdv] [-p PREFIX] [-n NUMTHREADS] [clean|minimal|nogui]"
	echo "    -h             print this help"
	echo "    -p PREFIX      set installation prefix, default is \$HOME/local.rtaproto1"
	echo "    -n NUMTHREADS  default number of threads is the number of cores"
	echo "    -d             compile with debug"
	echo "    -s             skip download/update"
	echo "    -v             verbose output"
	exit
}

#################################################
# parse command options

while getopts "hp:n:dsv" o;
do
	case "${o}" in
		h)
			show_help
			;;

		p)
			eval prefix=${OPTARG}
			;;

		n)
			eval nthreads=${OPTARG}
			;;

		d)
			build_type=Debug
			;;

		v)
			verbose="VERBOSE=1"
			;;

		s)
			skip_update="true"
			;;

		*)
			show_help
			;;
	esac
done
shift $((OPTIND-1))

declare -a cmake_repoinstall=("libQLBase")
if [[ $1 == "minimal" ]]
then
	declare -a repo_install=("PacketLib" "RTAtelem" "RTAConfig" "RTAEBSimIce" "RTACoreIce")
elif [[ $1 == "nogui" ]]
then
	declare -a repo_install=("PacketLib" "RTAtelem" "RTAConfig" "RTAtelemDemo" "RTAEBSimIce" "RTACoreIce")
else
	declare -a repo_install=("PacketLib" "RTAtelem" "RTAConfig" "RTAtelemDemo" "RTAEBSimIce" "RTACoreIce" "RTAMonitor" "RTAViewArray" "RTAViewCamera")
fi

#################################################
# check privileges and create prefix directories

trap - ERR
mkdir -p $prefix
if [ $? -ne 0 ] ; then
	trap exitfunc ERR
	echo_red "You have not the write permissions on $prefix."
	echo_red "Maybe you want to run the script as root? Trying with sudo.."
	sudo=sudo
	$sudo mkdir -p $prefix
fi
trap exitfunc ERR

#		update_repo git@github.com:ASTRO-BO/PacketLib.git v4.3.3
#		update_repo git@github.com:ASTRO-BO/RTAConfig.git v1.0.1
#		update_repo git@github.com:ASTRO-EDU/RTACoreIce.git v1.1.0
#		update_repo git@github.com:ASTRO-EDU/RTAEBSimIce.git v1.0.2
#		update_repo git@github.com:ASTRO-BO/RTAMonitor.git v1.0.2
#		update_repo git@github.com:ASTRO-BO/RTAViewArray.git v1.0.1
#		update_repo git@github.com:ASTRO-BO/RTAViewCamera.git v1.0.1
#		update_repo git@github.com:ASTRO-BO/RTAtelem.git v1.6.0
#		update_repo git@github.com:ASTRO-BO/RTAtelemDemo.git v1.5.0
#		update_repo git@github.com:ASTRO-BO/libQLBase.git v0.3.3

#################################################
# generate profile and load it

if [[ $clean != "clean" ]] ; then

echo_red "#### generating profile"

cat << EOF > profile_rtaproto1
#!/usr/bin/env bash

rtaproto1_prefix=$prefix
include_paths="\$rtaproto1_prefix/include"
lib_paths="\$rtaproto1_prefix/lib"
bin_paths="\$rtaproto1_prefix/bin"

if [[ -z \$C_INCLUDE_PATH || \$C_INCLUDE_PATH != *"\$include_paths"* ]] ; then
    export C_INCLUDE_PATH="\$include_paths"\${C_INCLUDE_PATH:+:\$C_INCLUDE_PATH}
fi
if [[ -z \$CPLUS_INCLUDE_PATH || \$CPLUS_INCLUDE_PATH != *"\$include_paths"* ]] ; then
    export CPLUS_INCLUDE_PATH="\$include_paths"\${CPLUS_INCLUDE_PATH:+:\$CPLUS_INCLUDE_PATH}
fi
if [[ -z \$PATH || \$PATH != *"\$bin_paths"* ]] ; then
    export PATH="\$bin_paths"\${PATH:+:\$PATH}
fi
if [[ -z \$CMAKE_INCLUDE_PATH || \$CMAKE_INCLUDE_PATH != *"\$include_paths"* ]] ; then
    export CMAKE_INCLUDE_PATH="\$include_paths"\${CMAKE_INCLUDE_PATH:+:\$CMAKE_INCLUDE_PATH}
fi
if [[ -z \$CMAKE_LIBRARY_PATH || \$CMAKE_LIBRARY_PATH != *"\$lib_paths"* ]] ; then
    export CMAKE_LIBRARY_PATH="\$lib_paths"\${CMAKE_LIBRARY_PATH:+:\$CMAKE_LIBRARY_PATH}
fi
if [[ -z \$LIBRARY_PATH || \$LIBRARY_PATH != *"\$lib_paths"* ]] ; then
    export LIBRARY_PATH="\$lib_paths"\${LIBRARY_PATH:+:\$LIBRARY_PATH}
fi
if [[ -z \$LD_LIBRARY_PATH || \$LD_LIBRARY_PATH != *"\$lib_paths"* ]] ; then
    export LD_LIBRARY_PATH="\$lib_paths"\${LD_LIBRARY_PATH:+:\$LD_LIBRARY_PATH}
fi
if [[ -z \$DYLD_LIBRARY_PATH || \$DYLD_LIBRARY_PATH != *"\$lib_paths"* ]] ; then
    export DYLD_LIBRARY_PATH="\$lib_paths"\${DYLD_LIBRARY_PATH:+:\$DYLD_LIBRARY_PATH}
fi
if [[ -z \$PYTHONPATH || \$PYTHONPATH != *"\$lib_paths"* ]] ; then
    export PYTHONPATH="\$lib_paths"\${PYTHONPATH:+:\$PYTHONPATH}
fi

export CTARTA=\$rtaproto1_prefix

EOF

echo_red "#### loading profile"
. profile_rtaproto1

fi

#################################################
# build packages

for i in "${cmake_repoinstall[@]}"
do
    pushd $PWD
	cd $sourcedir/$i
	cmake_builddir=$sourcedir/$i/build
	if [[ $clean == "clean" ]] ; then
		echo_red "#### cleaning $i"
		rm -rf $cmake_builddir
		echo_red "#### clean complete."
	else
		echo_red "#### installing $i $(git describe)"
		mkdir -p $cmake_builddir ; cd $cmake_builddir
	    cmake -DCMAKE_BUILD_TYPE=$build_type \
	          -DCMAKE_INSTALL_PREFIX:PATH=$prefix \
	           ..
		$sudo make install -j$nthreads $verbose
		echo_red "#### $i installation successful."
	fi
	popd
done

for i in "${repo_install[@]}"
do
	pushd $PWD
	cd $sourcedir/$i
	if [[ $clean == "clean" ]] ; then
		echo_red "#### cleaning $i"
		make clean
		echo_red "#### clean complete."
	else
	echo_red "#### installing $i"
		set_debug_flags
		make -j$nthreads
		$sudo make install prefix="$prefix"
		reset_flags
		echo_red "#### $i installation successful."
	fi
	popd
done

if [[ $1 != "clean" ]] ; then
	cd $sourcedir
	$sudo cp -p profile_rtaproto1 $prefix/share
	$sudo cp -p rtaproto1 $prefix/bin
	$sudo cp -p rtaproto1_gui $prefix/bin
	$sudo cp -p rtaproto1_zmq $prefix/bin
fi
